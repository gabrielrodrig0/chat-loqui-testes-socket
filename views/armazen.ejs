//type = "text/javascript"
    let socket = io();
    let roomName = "<%=roomName%>";
    let nome = "<%=userName%>";

    socket.emit("selected_room", { roomName:roomName});
    
    function enviar(){

        let msg = document.getElementById("msg").value;
        nome = "<%=userName%>";

        if (/*nome==="" ||*/msg === ""){
            return;
        }
        else {
            socket.emit("message", {nome:nome, msg:msg});
            document.getElementById("msg").value="";
        }

    }

        socket.on("showmessage", data=>{
            let cout=0; cout++;
            console.log("COUT == "+cout)
            let p = document.createElement("p");
            p.innerText = data.nome+": "+data.msg;
            p.style.marginBottom = "0.5rem";
            p.style.backgroundColor = "#A3A3A3";
            p.style.padding = "0.5rem";
            p.style.borderRadius = "0.3rem";
            p.style.overflow = "auto";
            let div = document.getElementById("msg-box");
            div.appendChild(p);
        })

        //USERS ONLINE
        socket.emit("userOnline", {user:"<%=userName%>"});

        socket.on("showUser", dado=>{
            let li1 = document.createElement("li");
            li1.innerText = `${dado.user} is online!`;
            let ul1 = document.querySelector(".friend-list");
            ul1.appendChild(li1);
            
        })






        *******************************

        
io.on("connection", (socket)=>{
    
    count++;
    userList.push(socket.id);
    console.log(userList);
    
    console.log(socket.id+" entrou!");
    console.log(count+" usuários on-line!");
    
    //*Unica alereação em relação ao original
    socket.on("selected_room", (data)=>{
        console.log("Room name: "+data.roomName);
      })    


    socket.on("disconnect", ()=>{
        count--;
        for (let k=0; k<userList.length; k++){
            if(userList[k]===socket.id){
                userList.splice(k,1);
            }
        }
        //console.log(socket.id+" se desconectou!");
        console.log(count+" usuários on-line!");
        console.log(userList);
    })

    socket.on("message", data=>{
        console.log(data.nome+": "+data.msg);
        io.emit("showmessage", data);
    })

    //USERS ONLINE
    socket.on("userOnline", dado=>{
        io.emit("showUser", dado);
    })

    
})
///////////////////////////////////////////////


function verificando(roomName,userName,id){

    let auxVerificador;

    console.log("AUXILIADOOOORRR INICIAL::: "+ auxVerificador); //undefined
    rooms.findOne({where:{roomName:roomName}}).then(room =>{
        
        //-----------------
        /*console.log("Room selecionada: -->")
        console.log("roomName: "+room.roomName+" || limit: "+room.limit+" || ID: "+id);
*/
          if(room == undefined){
            console.log("ROOM NAO EXISTE");
            auxVerificador=0;
          }else{ // room exists
      
            if(room.limit == "group"){
      
              usersInRoom.findOne({where:{roomName:roomName}&&{userName:userName}}).then(inRoom =>{
    
                if(inRoom!=undefined){ 
                    //usuário já esteve nessa group room
                    //atualize seu id e da um join para room
                    inRoom.socketId = id
                    console.log("ID atualizado - Grupo")
                }else { //usuário nunca esteve nessa room group
                      //ele não está ligado a sala, então da join e anexe no userIroom
                    usersInRoom.create({
                        roomName:roomName,
                        userName:userName,
                        socketId:id
                    }).then(()=>{
                        console.log("ATRELACAO FEITA COM SUCESSO");
                    })
                }
              });
              auxVerificador=1;
              
            //PRIVADO
            }else { //room.limit == private
                console.log("roomName: "+room.roomName+" || userName: "+userName);

              usersInRoom.findOne({where:{roomName:roomName} && {userName:userName}}).then(inroom =>{
                console.log("InRoom")
                //console.log("roomName: "+inroom.roomName+" || userName: "+inroom.userName+" || ID: "+inroom.socketId);
                if(inroom!=undefined){ 
                //usuário esteve nessa private room 
                //.atualize seu id e da um join para room
                    inroom.socketId = id
                    console.log("ID atualizado - Privado")
                    auxVerificador=1;

                }else { /*nunca esteve nessa room antes, verificar quantas pessoas tem nesta room privada,
                    caso tenha menos de duas pessoas, usuário pode entrar 
                    */

                    usersInRoom.findAll({where:{roomName:roomName}}).then(quantidade=>{
                        
                        console.log("QUANTAS PESSOAS NA SALA: "+quantidade.length)

                        if(quantidade.length == 2){//não pode entrar, chat privado
                            console.log("ROOM PRIVADA, VOCE NAO VAI ENTRAR");
                            console.log("AUXILIADOOOORRR OK  "+ auxVerificador); //
                            auxVerificador=0;
                            console.log("AUXILIADOOOORRR OK  "+ auxVerificador);

                        }else{
                            //usuário nunca esteve nessa room private
                            //ele não está ligado a sala, então da join e anexe no userIroom
                            usersInRoom.create({
                                roomName:roomName,
                                userName:userName,
                                socketId:id
    
                            }).then(()=>{
                            console.log("ATRELACAO FEITA COM SUCESSO");
                            })
                            auxVerificador=1;
                        }
                    })
                }
              })
            } 
          }
          
        })

    console.log("AUXILIADOOOORRR PÓS CANTEIRO  "+ auxVerificador);
    if(auxVerificador==1){
        return 1;
    }else{return 0;}


}

